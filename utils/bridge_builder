#!/usr/bin/env python

"""
Implements Biobanks bridging strategy as described 
on http://red4.crs4.it/projects/yoda/wiki/_BridgingStrategy

All the configuration details needed by the script are collected into a YAML
file with the following structure:

 omero:
   host: hostname
   user: user - lab_side
   passwd: pass
   study: Label of the OMERO's study - user_side
   group: OMERO group - user_side

 io:
   input_file: input file path
   output_path: output path

Use as input a tsv file like this:

ind_code-user_side    tube_code-lab_side
ID1    MUa205
ID2    LAa747
ID3    MOa549

The output can be imported into OMERO using VLU.change_source GALAXY tool

"""

import argparse
import csv
import os
import sys
import yaml

from bl.vl.utils import get_logger, LOG_LEVELS
from bl.vl.kb import KnowledgeBase as KB


def load_config(config_file):
    with open(config_file) as cfg:
        conf = yaml.load(cfg)
    return conf


def write_tsv(logger, filename, tsv_header, records):
    logger.debug('Writing TSV file %s' % filename)
    with open(filename, 'w') as f:
        writer = csv.writer(f, tsv_header,
                            delimiter='\t', quotechar='"')
        writer.writerow(tsv_header)
        for r in records:
            writer.writerow(r)
    return


def make_parser():
    parser = argparse.ArgumentParser(description='bridge_builder')
    parser.add_argument('--logfile', type=str, help='log file (default=stderr)')
    parser.add_argument('--loglevel', type=str, choices=LOG_LEVELS,
                        help='logging level', default='INFO')
    parser.add_argument('--config_file', type=str, help='config file path',
                        required=True)
    return parser


def main(argv):
    parser = make_parser()
    args = parser.parse_args(argv)

    logger = get_logger('bridge_builder', level=args.loglevel,
                        filename=args.logfile)

    if os.path.isfile(args.config_file):
        conf = load_config(args.config_file)
    else:
        logger.critical('{} not exists'.format(args.config_file))
        sys.exit()

    if os.path.isfile(conf['io']['input_file']):
        in_file_path = conf['io']['input_file']
    else:
        logger.critical('{} not exists'.format(conf['io']['input_file']))
        sys.exit()

    if os.path.isdir(conf['io']['output_path']):
        output_path = conf['io']['output_path']
    else:
        logger.critical('{} not exists'.format(conf['io']['output_path']))
        sys.exit()

    change_source_file = os.path.join(output_path, 'change_source')

    host = conf['omero']['host']
    user = conf['omero']['user']
    passwd = conf['omero']['passwd']
    group = conf['omero']['group']
    study_label = conf['omero']['study']

    # OMERO.biobank client init
    kb = KB(driver='omero')(host, user, passwd)

    with open(in_file_path) as f:
        reader = csv.DictReader(f, delimiter='\t')
        records = [r for r in reader]
    logger.info('Loaded %d records' % len(records))

    # moving to user-side
    kb.change_group(group)

    enrolls = dict((e.studyCode, e) for e in kb.get_enrolled(kb.get_study(
        study_label)))
    logger.info('Retrieved {} enrollments from {}'.format(len(enrolls),
                                                          study_label))
    tubes_map = []
    for r in records:
        ind_study_code = r['ind_code-user_side']
        tube_code_lab_side = r['tube_code-lab_side']
        if ind_study_code in enrolls:
            tubes = kb.dt.get_connected(enrolls[ind_study_code].individual,
                                        kb.Tube,
                                        direction=kb.dt.DIRECTION_OUTGOING,
                                        query_depth=1)
            tube_code_user_side = tubes[0].label
            tubes_map.append([tube_code_user_side, tube_code_lab_side])

    tsv_header_change_source = ['new_source', 'target']
    write_tsv(logger, change_source_file, tsv_header_change_source, tubes_map)
    logger.info("{} tubes to update".format(len(tubes_map)))

if __name__ == "__main__":
    main(sys.argv[1:])
